{
  "language": "Solidity",
  "sources": {
    "contracts/EIP2929Wrapper.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/**\n * @title EIP2929Proxy\n * @dev Gives the possibility to delegate any call to a foreign implementation.\n */\ncontract EIP2929Wrapper {\n    /**\n     * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n     * This function will return whatever the implementation call returns\n     */\n\n    fallback() external payable {\n        assembly {\n            // Proxy\n            let prefetch := 0x6a9880894a09873B908933F1528d368ffbc465Ef\n            let originalCall := 0xDCc67e78aBbe02b5D221630D34992C7E81d2C6a5\n\n            // PRE-SLOAD by calling prefetch contract\n            // NOTE: this MUST NOT revert\n            let result := call(gas(), prefetch, callvalue(), 0, 0, 0, 0)\n\n            // CALL\n            calldatacopy(0, 0, calldatasize())\n\n            result := call(gas(), originalCall, callvalue(), 0, calldatasize(), 0, 0)\n\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}